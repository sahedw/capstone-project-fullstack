{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport classnames from 'classnames';\r\n/**\r\n * A single Geosuggest item in the list\r\n */\r\nvar default_1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(default_1, _super);\r\n    /**\r\n     * The constructor.\r\n     */\r\n    function default_1(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        /**\r\n         * The reference to the suggest element\r\n         */\r\n        _this.ref = null;\r\n        _this.onClick = _this.onClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Makes a text bold\r\n     */\r\n    default_1.prototype.makeBold = function (element, key) {\r\n        return (React.createElement(\"b\", { className: \"geosuggest__item__matched-text\", key: key }, element));\r\n    };\r\n    /**\r\n     * Replace matched text with the same in bold\r\n     */\r\n    default_1.prototype.formatMatchedText = function (userInput, suggest) {\r\n        if (!userInput || !suggest.matchedSubstrings) {\r\n            return suggest.label;\r\n        }\r\n        var start = suggest.matchedSubstrings.offset;\r\n        var length = suggest.matchedSubstrings.length;\r\n        var end = start + length;\r\n        var boldPart = this.makeBold(suggest.label.substring(start, end), suggest.label);\r\n        var pre = '';\r\n        var post = '';\r\n        if (start > 0) {\r\n            pre = suggest.label.slice(0, start);\r\n        }\r\n        if (end < suggest.label.length) {\r\n            post = suggest.label.slice(end);\r\n        }\r\n        return (React.createElement(\"span\", null,\r\n            pre,\r\n            boldPart,\r\n            post));\r\n    };\r\n    /**\r\n     * Checking if item just became active and scrolling if needed.\r\n     */\r\n    default_1.prototype.componentDidUpdate = function (prevProps) {\r\n        if (!prevProps.isActive && this.props.isActive) {\r\n            this.scrollIfNeeded();\r\n        }\r\n    };\r\n    /**\r\n     * Scrolling current item to the center of the list if item needs scrolling.\r\n     * Item is scrolled to the center of the list.\r\n     */\r\n    default_1.prototype.scrollIfNeeded = function () {\r\n        var element = this.ref;\r\n        var parent = element && element.parentElement;\r\n        if (!element || !parent) {\r\n            return;\r\n        }\r\n        var overTop = element.offsetTop - parent.offsetTop < parent.scrollTop;\r\n        var overBottom = element.offsetTop - parent.offsetTop + element.clientHeight >\r\n            parent.scrollTop + parent.clientHeight;\r\n        if (overTop || overBottom) {\r\n            parent.scrollTop =\r\n                element.offsetTop -\r\n                    parent.offsetTop -\r\n                    parent.clientHeight / 2 +\r\n                    element.clientHeight / 2;\r\n        }\r\n    };\r\n    /**\r\n     * When the suggest item got clicked\r\n     */\r\n    default_1.prototype.onClick = function (event) {\r\n        event.preventDefault();\r\n        this.props.onSelect(this.props.suggest);\r\n    };\r\n    /**\r\n     * Render the view\r\n     */\r\n    default_1.prototype.render = function () {\r\n        var _this = this;\r\n        var _a;\r\n        var suggest = this.props.suggest;\r\n        var classes = classnames('geosuggest__item', this.props.className, this.props.suggestItemClassName, { 'geosuggest__item--active': this.props.isActive }, (_a = {},\r\n            _a[this.props.activeClassName || ''] = this.props.activeClassName\r\n                ? this.props.isActive\r\n                : null,\r\n            _a));\r\n        var content = suggest.label;\r\n        if (this.props.renderSuggestItem) {\r\n            content = this.props.renderSuggestItem(suggest, this.props.userInput);\r\n        }\r\n        else if (this.props.isHighlightMatch) {\r\n            content = this.formatMatchedText(this.props.userInput, suggest);\r\n        }\r\n        return (React.createElement(\"li\", { className: classes, ref: function (li) { return (_this.ref = li); }, style: this.props.style, onMouseDown: this.props.onMouseDown, onMouseOut: this.props.onMouseOut, onClick: this.onClick, role: \"option\", \"aria-selected\": this.props.isActive, id: suggest.placeId }, content));\r\n    };\r\n    return default_1;\r\n}(React.PureComponent));\r\nexport default default_1;\r\n"}
